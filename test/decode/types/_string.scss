@include describe("The json-decode--string function") {
  @include it("should properly decode strings") {
    @include should(expect(nth(_json-decode--string('""', 2), 2)), to(equal("")));
    @include should(expect(nth(_json-decode--string('"1 px"', 2), 2)), to(equal("1 px")));
    @include should(expect(nth(_json-decode--string('"test"', 2), 2)), to(equal("test")));
    @include should(expect(nth(_json-decode--string('"test with inner spaces"', 2), 2)), to(equal("test with inner spaces")));
    @include should(expect(nth(_json-decode--string('"   test with outer spaces   "', 2), 2)), to(equal("   test with outer spaces   ")));
  }

  @include it("should return false if no end of string is found") {
    @include should(expect(nth(_json-decode--string('"test', 2), 2)), to(equal(false)));
    @include should(expect(nth(_json-decode--string('"test\\"', 2), 2)), to(equal(false)));
  }

  @include it("should decode to string type") {
    @include should(expect(type-of(nth(_json-decode--string('""', 2), 2))), to(equal('string')));
    @include should(expect(type-of(nth(_json-decode--string('"1 px"', 2), 2))), to(equal('string')));
    @include should(expect(type-of(nth(_json-decode--string('"test"', 2), 2))), to(equal('string')));
    @include should(expect(type-of(nth(_json-decode--string('"test with inner spaces"', 2), 2))), to(equal('string')));
    @include should(expect(type-of(nth(_json-decode--string('"   test with outer spaces   "', 2), 2))), to(equal('string')));
  }

  @include it("should work with escaped quotes in string"){
    @include should(expect(nth(_json-decode--string('"test\\"test"', 2), 2)), to(equal('test\\"test')));
  }
}
